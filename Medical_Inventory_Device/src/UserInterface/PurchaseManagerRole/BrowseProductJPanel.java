/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PurchaseManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.Product;
import Business.Enterprise.ProductCatalog;
import Business.Enterprise.ProductItem;
import Business.Enterprise.PurchaseDevice;
import Business.Enterprise.PurchaseEnterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.IntegerVerifier;
import Business.Inventory.InventoryItem;
import Business.Network.Network;
import Business.Order.MasterOrderCatalog;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.FinanceOrganization;
import Business.Organization.Organization;
import Business.StringVerifier;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SupplierManagerTestWorkRequest;
import Business.WorkQueue.PurchaseManagerTestWorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class BrowseProductJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Boolean isCheckedOut = false;
    private Order order;
    private Organization organization;
    private EcoSystem business;
    private UserAccount useraccount;
    private PurchaseEnterprise enterprise;
    // Employee employee = useraccount.getEmployee();
    private MasterOrderCatalog masterOrderCatalog;
    private PurchaseManagerTestWorkRequest pmwr;
    private SupplierManagerTestWorkRequest smwr;
    Network network;

    public BrowseProductJPanel(JPanel userProcessContainer, EcoSystem business,
            Organization o, UserAccount useraccount, PurchaseEnterprise enterprise, PurchaseManagerTestWorkRequest pmwr) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.useraccount = useraccount;
        this.business = business;
        masterOrderCatalog = business.getMasterOrderCatalog();
        this.organization = o;
        this.pmwr = pmwr;
        this.enterprise = enterprise;
        populateNetworkCombo();
        populateProductTable();
        if (!isCheckedOut) {
            order = new Order();
        }
        InputVerifier integerverifier = new IntegerVerifier();
        InputVerifier stringverifier = new StringVerifier();
        txtSearch.setInputVerifier(stringverifier);
DefaultTableModel dtm = (DefaultTableModel) tblOrderItemTable.getModel();
        dtm.setRowCount(0);
        //  populatedeviceProductTable();
    }

    public void populatedeviceProductTable() {
        DefaultTableModel model = (DefaultTableModel) deviceTbl.getModel();

        model.setRowCount(0);
        for (PurchaseDevice pd : pmwr.getPurchaseDeviceCatalog().getPurchaseDeviceList()) {
            Object[] row = new Object[2];
            row[0] = pd.getName();
            row[1] = pd.getQuantity();
            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseEnterpriseCombo = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        btnAddtoCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderItemTable = new javax.swing.JTable();
        spinner = new javax.swing.JSpinner();
        btnCheckout = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        chooseNetworkCombo = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        deviceTbl = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        chooseEnterpriseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        chooseEnterpriseCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseEnterpriseComboActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Enter Product");

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProduct);
        if (tblProduct.getColumnModel().getColumnCount() > 0) {
            tblProduct.getColumnModel().getColumn(0).setResizable(false);
            tblProduct.getColumnModel().getColumn(1).setResizable(false);
            tblProduct.getColumnModel().getColumn(2).setResizable(false);
        }

        btnAddtoCart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddtoCart.setText("Add to Cart");
        btnAddtoCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddtoCartActionPerformed(evt);
            }
        });

        tblOrderItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ProductName", "ModelNumber", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblOrderItemTable);
        if (tblOrderItemTable.getColumnModel().getColumnCount() > 0) {
            tblOrderItemTable.getColumnModel().getColumn(0).setResizable(false);
            tblOrderItemTable.getColumnModel().getColumn(2).setResizable(false);
        }

        btnCheckout.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCheckout.setText("CheckOut");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Select Network");

        chooseNetworkCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        chooseNetworkCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseNetworkComboActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("See all Orders");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Choose Enterprise");

        deviceTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "DeviceName", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(deviceTbl);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Browse Product Work Area");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("Show Devices to be Purchased");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Choose Quantity");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("<<Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(btnAddtoCart))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(btnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(87, 87, 87)
                                        .addComponent(chooseNetworkCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(chooseEnterpriseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(58, 58, 58))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton3)))
                .addGap(101, 101, 101))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton2)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseNetworkCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(chooseEnterpriseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddtoCart)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckout)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseEnterpriseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseEnterpriseComboActionPerformed
        populateProductTable();
    }//GEN-LAST:event_chooseEnterpriseComboActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (txtSearch.getText().length() > 0) {
            String productName = txtSearch.getText();
            Network nw = (Network) chooseNetworkCombo.getSelectedItem();
            for (Enterprise ep : nw.getEnterpriseDirectory().getEnterpriselist()) {
                if (ep.getEnterprisetype().getValue().equals(Enterprise.EnterpriseType.Supplier.getValue())) {
                    SupplierEnterprise supEnt = (SupplierEnterprise) ep;
                    for (Product product : supEnt.getProductCatalog().getProductCatalog()) {
                        if (productName.equals(product.getProdName())) {
                            populateProductTable(product);
                        }
                    }
                }
            }

        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void populateNetworkCombo() {
        chooseNetworkCombo.removeAllItems();

        for (Network n : business.getNetworklist()) {
            chooseNetworkCombo.addItem(n);
        }

    }


    private void btnAddtoCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddtoCartActionPerformed
        int selectedrow = tblProduct.getSelectedRow();

        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row in the product table");
            return;
        }
        Product product = (Product) tblProduct.getValueAt(selectedrow, 0);

        int quantity = (Integer) spinner.getValue();
        if (quantity > product.getAvailability()) {
            JOptionPane.showMessageDialog(this, "Error!!! Please enter a quantity less than Availability");
            return;
        } else if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Error!!! Please enter a quantity greater than zero");
            return;
        }
        boolean flag = true;
        if (flag == true) {
            int count = 0;
            for (ProductItem pi : product.getProductitemlist()) {
                if (count < quantity) {
                    OrderItem oi = new OrderItem();
                    oi.setProductItem(pi);
                    order.getOrderlist().add(oi);
                    count++;
                }
            }
            for (OrderItem oi : order.getOrderlist()) {
                product.removeItem(oi.getProductItem());
            }
        }

        populateOrderItemTable(order);
        int qty = (product.getAvailability() - quantity);
        product.setAvailability(qty);
        populateProductTable();
        System.out.println("Device added to cart successfully");

    }//GEN-LAST:event_btnAddtoCartActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
                DefaultTableModel dtm = (DefaultTableModel) tblOrderItemTable.getModel();
                if(dtm.getRowCount()>0){
                    
                
        order.setEmployeeId(useraccount.getEmployee().getId());
        for (Network nw : business.getNetworklist()) {
            for (Enterprise ep : nw.getEnterpriseDirectory().getEnterpriselist()) {
                if (ep.getEnterprisetype().getValue().equals(Enterprise.EnterpriseType.Hospital.getValue())) {

                    HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) ep;
                    if (pmwr.getEnterpriID() == hospitalEnterprise.getEnterpriseid()) {

                        for (OrderItem orderItem : order.getOrderlist()) {

                            InventoryItem inventoryItem = hospitalEnterprise.getInventoryCatalog().addInventoryitem();
                            inventoryItem.setOrderitem(orderItem);
                            inventoryItem.setEnterprise(hospitalEnterprise);
                        }
                        break;
                    }
                }
            }
        }
        pmwr.setStatus("Purchase Completed");
        smwr = new SupplierManagerTestWorkRequest();
        smwr.setSender(useraccount);
        smwr.setRequestDate(new Date());
        smwr.setStatus("Sent to supplier");
        smwr.setOrder(order);

        Network nw = (Network) chooseNetworkCombo.getSelectedItem();
        Organization org = null;

        for (Enterprise enterprise : nw.getEnterpriseDirectory().getEnterpriselist()) {
            if (enterprise.getEnterprisetype().getValue().equals(Enterprise.EnterpriseType.Purchase.getValue())) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    System.out.println("The enterprise is" + enterprise);
                    if (organization instanceof FinanceOrganization) {
                        org = organization;
                        System.out.println("The enterprise is" + org);
                        break;
                    }
                }
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(smwr);
                    useraccount.getWorkQueue().getWorkRequestList().add(smwr);
                }

            }
        }

        Order selectedOrder = masterOrderCatalog.addOrder(order);
        if (selectedOrder != null) {
            isCheckedOut = true;
            order = new Order();
            populateOrderItemTable(order);

        }
        JOptionPane.showMessageDialog(this, "Congratulations!!Order has been placed successfully");
        System.out.println("Order placed successfully");
        dtm.setRowCount(0);
    }else{
                     JOptionPane.showMessageDialog(this, "The cart cannot be empty..please add aproduct");
                }
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void populateEnterprise(Network network) {
        chooseEnterpriseCombo.removeAllItems();

        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriselist()) {
            if (ent.getEnterprisetype().getValue().equalsIgnoreCase(Enterprise.EnterpriseType.Supplier.getValue())) {
                SupplierEnterprise supplierEnterprise = (SupplierEnterprise) ent;
                chooseEnterpriseCombo.addItem(ent);
            }
        }

    }
    private void chooseNetworkComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseNetworkComboActionPerformed
        // TODO add your handling code here:
        Network network = (Network) chooseNetworkCombo.getSelectedItem();
        if (network != null) {
            populateEnterprise(network);
        }
    }//GEN-LAST:event_chooseNetworkComboActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        OrderDetailsJPanel od = new OrderDetailsJPanel(userProcessContainer, business, masterOrderCatalog, useraccount);
        userProcessContainer.add("CustomerWorkAreaJPanel", od);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        populatedeviceProductTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddtoCart;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox chooseEnterpriseCombo;
    private javax.swing.JComboBox chooseNetworkCombo;
    private javax.swing.JTable deviceTbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner spinner;
    private javax.swing.JTable tblOrderItemTable;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    /* private void populateSupplierCombo() {
     cmbSupplierCombo.removeAllItems();
     for (Supplier supplier : supplierDirectory.getSupplierDict()) {
     cmbSupplierCombo.addItem(supplier);
     }
     populateProductTable();
     welcomeJTextField.setText(customer.getFname());
     }*/
    private void populateProductTable() {
        SupplierEnterprise supplierEnterprise = (SupplierEnterprise) chooseEnterpriseCombo.getSelectedItem();

        if (supplierEnterprise != null) {
            ProductCatalog productCatalog = supplierEnterprise.getProductCatalog();
            DefaultTableModel dtm = (DefaultTableModel) tblProduct.getModel();
            dtm.setRowCount(0);
            for (Product product : productCatalog.getProductCatalog()) {

                Object row[] = new Object[3];
                row[0] = product;
                row[1] = product.getPrice();
                row[2] = product.getAvailability();
                dtm.addRow(row);

            }

        }

    }

    private void populateProductTable(Product product) {
        DefaultTableModel dtm = (DefaultTableModel) tblProduct.getModel();
        dtm.setRowCount(0);
        Object row[] = new Object[3];
        row[0] = product;
        row[1] = product.getPrice();
        row[2] = (product.getAvailability());
        dtm.addRow(row);
    }

    private void populateOrderItemTable(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) tblOrderItemTable.getModel();
        dtm.setRowCount(0);
        for (OrderItem oi : order.getOrderlist()) {
            Object row[] = new Object[3];
            row[0] = oi.getProductItem().getProductName();
            row[1] = oi.getProductItem().getModelNumber();
            row[2] = oi.getProductItem().getPrice();

            dtm.addRow(row);
        }

    }

}
