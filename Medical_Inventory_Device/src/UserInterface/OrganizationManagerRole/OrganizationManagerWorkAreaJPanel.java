/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.OrganizationManagerRole;

import Business.EcoSystem;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.RequiredDevice;
import Business.Organization.HelperOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrganizationManagerWorkRequest;
import Business.WorkQueue.ReceptionistTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class OrganizationManagerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;

    private EcoSystem system;
    private UserAccount useraccount;

    public OrganizationManagerWorkAreaJPanel(JPanel userProcessContainer, UserAccount useraccount,
            EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.useraccount = useraccount;
        this.system = system;
        populateRequestTable();

    }

    public void populateRequestTable() {
        System.out.println("the user is :" + useraccount);
        System.out.println("the user is :" + useraccount.getRole());

        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : useraccount.getWorkQueue().getWorkRequestList()) {
            if (request instanceof OrganizationManagerWorkRequest) {
                OrganizationManagerWorkRequest omTest = (OrganizationManagerWorkRequest) request;
                Object[] row = new Object[5];
                row[0] = omTest;
                row[1] = omTest.getSender();
                row[2] = omTest.getReceiver() == null ? null : omTest.getReceiver().getEmployee().getName();
                row[3] = omTest.getStatus();
                row[4] = omTest.getEnterpriseId();
                model.addRow(row);
            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        scheduleSurgeryJBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        deviceTbl = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Organization Manger Work Area");

        scheduleSurgeryJBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        scheduleSurgeryJBtn.setText("Schedule SurgeryDevices >>");
        scheduleSurgeryJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleSurgeryJBtnActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Surgery", "Sender", "Receiver", "Status", "HospitalId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        assignBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        assignBtn.setText("Assign to me");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("View Required Devices");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        deviceTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "DeviceName", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(deviceTbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(scheduleSurgeryJBtn))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(assignBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addGap(97, 97, 97))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(assignBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(scheduleSurgeryJBtn)
                .addGap(118, 118, 118))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scheduleSurgeryJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleSurgeryJBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a row");
            return;
        }

        OrganizationManagerWorkRequest omwr = (OrganizationManagerWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        // OrganizationManagerWorkRequest omwr = (OrganizationManagerWorkRequest) request;
        if (omwr.getStatus().equalsIgnoreCase("Scheduling Completed") || omwr.getStatus().equalsIgnoreCase("Reserved")) {

            JOptionPane.showMessageDialog(this, "The request is already Scheduled so cannot be forwarded again");

                 } else if (omwr.getStatus().equalsIgnoreCase("Pending for Equipments")) {
            JOptionPane.showMessageDialog(this, "Kindly Assign the request first");
            
                     } else {

            SelectDevicesJPanel ssp = new SelectDevicesJPanel(system, useraccount, userProcessContainer, omwr);
            userProcessContainer.add("SelectDevices", ssp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            System.out.println("Going for scheduling of devices");
        }


    }//GEN-LAST:event_scheduleSurgeryJBtnActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Kindly select a row in the table");
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getStatus().equalsIgnoreCase("Scheduling Completed") || request.getStatus().equalsIgnoreCase("Reserved")) {

            JOptionPane.showMessageDialog(this, "The request is already Scheduled so cannot be forwarded again");

        } else {
            request.setReceiver(useraccount);
            request.setStatus("Assigned");
            populateRequestTable();
            System.out.println("The request from the careTeam has been assigned by Orgazatoion Manager" +useraccount);
        }
    }//GEN-LAST:event_assignBtnActionPerformed

    public void populateProductTable() {
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Kindly Select a row");
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        OrganizationManagerWorkRequest omwr = (OrganizationManagerWorkRequest) request;
        if (omwr.getStatus().equalsIgnoreCase("Assigned")) {
            DefaultTableModel model = (DefaultTableModel) deviceTbl.getModel();
            model.setRowCount(0);
            for (RequiredDevice rd : omwr.getRequireddeviceCatalog().getRequiredDeviceList()) {
                Object[] row = new Object[2];
                row[0] = rd.getName();
                row[1] = rd.getQuantity();
                model.addRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Kindly Assign the request first");
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignBtn;
    private javax.swing.JTable deviceTbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton scheduleSurgeryJBtn;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
